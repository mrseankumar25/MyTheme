window.theme = window.theme || {};

theme.formatCurrency = (cents, format) => {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
     return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
};

theme.getCart = async (type = 'success') => {
	let cartItems = '';
	if(type == 'success') {
		const req = await fetch('/cart.json', {
			method: "GET",
			headers: {
				"Content-type": "application/json"
			}
		});
		const { items } = await req.json();

		cartItems = `<div class="cartPopupItem">
			<div calss="cartPopupProductImage"><img src="${ items[0].featured_image.url }"></div>
			<div class="cartPopupProductInfo">
				<div class="cartPopupProductTitle">${ items[0].title }</div>
				<div class="cartPopupProductPrice">${ items[0].quantity } x ${ theme.formatCurrency(items[0].price, theme.moneyFormat) }</div>
				</div>
				</div>`
			} else {
				cartItems = `<div class="cartPopupItem">
				<div class="cartPopupProductInfo">
				<div class="cartPopupProductTitle">${ type }</div>
				<div class="cartPopupProductPrice">Something Happmed Please try Again after sometime.</div>
			</div>
		</div>`
	}

	const cartPopup = `<div class="cartPopup">
		<div class="cartPopupBody">${ cartItems }</div>
		${ type == 'success' ?
			`<div cartPopupFooter>
				<a href="{{ routes.cart_url }}" class="siteBtn black-bt">View Cart</a>
			</div>`
		: '' }
	</div>`;

	jQuery('body').prepend(cartPopup);

	setTimeout(function() {
		jQuery(document).find('.cartPopup').remove();
	}, 3000)
}

theme.addToCart = async (items) => {
	const req = await fetch('/cart/add.json', {
		method: "POST",
		headers: {
			"Content-type": "application/json"
		},
		body: JSON.stringify(items)
	});
	const res = await req.json();

	if(res.errors) {
		theme.getCart(res.errors)
	} else {
		theme.getCart('success')
	}
}

theme.addToCartDrawer = async (items) => {
	const req = await fetch('/cart/add.json', {
		method: "POST",
		headers: {
			"Content-type": "application/json"
		},
		body: JSON.stringify(items)
	});
	const res = await req.json();

	const cartReq = await fetch('/cart?view=ajax')
	const cartRes = await cartReq.text();

	console.info(jQuery(document).find('.cartPopup').length);
	if(jQuery(document).find('.cartPopup').length > 0) {
		jQuery(document).find('.cartPopup').html(`<div class="cartPopupClose">x</div>${ cartRes }`)
	} else {
		const cartPopup = `<div class="cartPopup cartPopupDrawer">
			<div class="cartPopupClose">x</div>
			<div class="cartPopupBody">${ cartRes }</div>
		</div>`;
		jQuery('body').prepend(cartPopup);
	}
	jQuery(document).find('.cartPopup').addClass('cartPopupDrawerOpen')
}

theme.upsell = async (items) => {
	const req = await fetch('/cart/update.json', {
		method: "POST",
		headers: {
			"Content-type": "application/json"
		},
		body: JSON.stringify(items)
	});
	const res = await req.json();

	if(res.errors) {
		theme.getCart(res.errors)
	} else {
		return true
	}
}

(function($) {
	/* Preloader */
	$(window).on('load', function() {
		$("#preloader").delay(600).fadeOut();
	});

	/* Scrollspy */
	$('body').scrollspy({
		target: '#nav',
		offset: $(window).height() / 2
	});

	/* Btn Nav Collapse */
	$('#nav .nav-collapse').on('click', function() {
		$('#nav').toggleClass('open');
	});

	/* Mobile Dropdown */
	$('.has-dropdown a').on('click', function() {
		$(this).parent().toggleClass('open-drop');
	});

	/* On Scroll */
	$(window).on('scroll', function() {
		var wScroll = $(this).scrollTop(),
			wHeight = $(window).height();

		// Fixed nav
		wScroll > 1 ? $('#nav').addClass('fixed-nav') : $('#nav').removeClass('fixed-nav');

		// Back To Top Appear
		wScroll > (wHeight / 2) ? $('#back-to-top').fadeIn() : $('#back-to-top').fadeOut();
	});

	/* Magnific Popup */
	$('.imageContainer').magnificPopup({
		delegate: '.lightbox',
		type: 'image'
	});

	/* Testimonial Slider */
	$('#testimonialContainer').owlCarousel({
		autoplay: true,
		dots: true,
		items:1,
		loop: true,
		margin: 0,
		nav: false,
	});

	$('select:not(.hide)').select2();
	$('#Preference').select2({
		placeholder: 'Preference For 1st Call',
		allowClear: true
	});
	$('#Important').select2({
		placeholder: 'Most Important For You',
		allowClear: true
	});
	$('#AgeProfile').select2({
		placeholder: 'Age Profile',
		allowClear: true
	});
	$('#WhyUs').select2({
		placeholder: 'Why Us',
		allowClear: true
	});
	$('#AboutUs').select2({
		placeholder: 'How Hear About Us',
		allowClear: true
	});

	jQuery(document).on('click', '.paymentConatiner #AddToCart', async function(e) {
		const upsellForm = {
			"updates": {}
		}
		if(jQuery('.upsellTable').length > 0) {
			jQuery('.upsellTable tbody input').each(function() {
				if(jQuery(this).is(":checked")) {
					upsellForm.updates[jQuery(this).val()] = 1
				}
			})
		}

		const upsellData = await theme.upsell(upsellForm)
		if(upsellData) {
			jQuery(this).parents('form').submit()
		}
	})

	jQuery(document).on('submit', '.addToCartForm', async function(e) {
		if(jQuery(this).data('ajax') == "notification" || jQuery(this).data('ajax') == "drawer") {
			e.preventDefault();
			const formData = {
				"items": [
					{
						"id": jQuery(this).find('[name="id"]').val(),
						"quantity": jQuery(this).find('input[name="quantity"]').val()
					}
				]
			}

			if(jQuery(this).data('ajax') == "notification") {
				theme.addToCart(formData);
			} else {
				theme.addToCartDrawer(formData)
			}
		} else {
			jQuery(this).submit();
		};
	})
	jQuery(document).on('click', '.cartPopupClose', function() {
		jQuery(this).parents('.cartPopup').removeClass('cartPopupDrawerOpen')
	})
	jQuery(document).on('change', '.cartFormWrapper input', async function() {
		if(jQuery(this).parents('form').data('ajax') == "notification" || jQuery(this).parents('form').data('ajax') == "drawer") {
			const req = await fetch('/cart/change.json', {
				method: "POST",
				headers: {
					"Content-type": "application/json"
				},
				body: JSON.stringify({
					"id": `${jQuery(this).data('key')}`,
					"quantity": jQuery(this).val()
				})
			})
			const res = await req.json();

			const cartReq = await fetch('/cart?view=ajax')
			const cartRes = await cartReq.text();
			if(window.location.pathname == '/cart') {
				jQuery(this).parents('.shopify-section').html(`${ cartRes }`)
			} else {
				jQuery(document).find('.cartPopup').html(`<div class="cartPopupClose">x</div>${ cartRes }`)
			}
		}
	})
	jQuery(document).on('click', '.cartFormWrapper .remove', async function(e) {
		e.preventDefault();

		if(jQuery(this).parents('form').data('ajax') == "notification" || jQuery(this).parents('form').data('ajax') == "drawer") {
			const req = await fetch('/cart/change.json', {
				method: "POST",
				headers: {
					"Content-type": "application/json"
				},
				body: JSON.stringify({
					"id": `${jQuery(this).data('key')}`,
					"quantity": 0
				})
			})
			const res = await req.json();

			const cartReq = await fetch('/cart?view=ajax')
			const cartRes = await cartReq.text();
			if(window.location.pathname == '/cart') {
				jQuery(this).parents('.shopify-section').html(`${ cartRes }`)
			} else {
				jQuery(document).find('.cartPopup').html(`<div class="cartPopupClose">x</div>${ cartRes }`)
			}
		}
	})
})(jQuery);

class LocalizationForm extends HTMLElement {
  constructor() {
    super();
    this.elements = {
      input: this.querySelector('input[name="language_code"], input[name="country_code"]'),
      button: this.querySelector('button'),
      panel: this.querySelector('ul'),
    };
    this.elements.button.addEventListener('click', this.openSelector.bind(this));
    this.elements.button.addEventListener('focusout', this.closeSelector.bind(this));
    this.addEventListener('keyup', this.onContainerKeyUp.bind(this));

    this.querySelectorAll('a').forEach(item => item.addEventListener('click', this.onItemClick.bind(this)));
  }

  hidePanel() {
    this.elements.button.setAttribute('aria-expanded', 'false');
    this.elements.panel.setAttribute('hidden', true);
  }

  onContainerKeyUp(event) {
    if (event.code.toUpperCase() !== 'ESCAPE') return;

    this.hidePanel();
    this.elements.button.focus();
  }

  onItemClick(event) {
    event.preventDefault();
    const form = this.querySelector('form');
    this.elements.input.value = event.currentTarget.dataset.value;
    if (form) form.submit();
  }

  openSelector() {
    this.elements.button.focus();
    this.elements.panel.toggleAttribute('hidden');
    this.elements.button.setAttribute('aria-expanded', (this.elements.button.getAttribute('aria-expanded') === 'false').toString());
  }

  closeSelector(event) {
    const shouldClose = event.relatedTarget && event.relatedTarget.nodeName === 'BUTTON';
    if (event.relatedTarget === null || shouldClose) {
      this.hidePanel();
    }
  }
}

customElements.define('localization-form', LocalizationForm);

const searchFormBtn = document.querySelector('.searchForm')
searchFormBtn.addEventListener('click', function() {
	document.querySelector('.searchFormModel').style.display = 'block'
})

const searchFormModelClose = document.querySelector('.searchFormModelClose')
searchFormModelClose.addEventListener('click', function() {
	document.querySelector('.searchFormModel').style.display = 'none'
})

async function suggestionList(e) {
	if(e.value.length > 2) {
		const thisVal = e.value
		const thisType = e.closest('form').querySelector('input[name="type"]').value
		const suggestionList = e.closest('form').querySelector('.suggestionList')
	
		const req = await fetch(`/search?view=ajax&type=${ thisType }&q=${ thisVal }`)
		const { items: res } = await req.json()

		const ul = document.createElement('ul')
		suggestionList.innerHTML = ''
		res.forEach(item => {
			const li = document.createElement('li')
			const a = document.createElement('a')
			a.href = item.url
			a.innerText = item.title

			li.append(a)
			ul.append(li)
		})
		if(res.length > 0) suggestionList.append(ul)
	}
}
